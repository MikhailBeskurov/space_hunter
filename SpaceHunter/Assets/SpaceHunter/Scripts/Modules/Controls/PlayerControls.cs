//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/SpaceHunter/Scripts/Modules/Controls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace SpaceHunter.Scripts.Modules.Controls
{
    public partial class @PlayerControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Character"",
            ""id"": ""1b65a265-d182-40f1-850d-b03748946be6"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""56bc7e4a-0201-472f-9ce6-bcd1dcce47dd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CrosshairPosition"",
                    ""type"": ""Value"",
                    ""id"": ""f8b26740-daf8-4ae7-8f79-ded95f22d379"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""3a056c1a-e3ed-4937-b729-4f56e223acaf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollWeapon"",
                    ""type"": ""Value"",
                    ""id"": ""e45cb0da-ae56-4d91-bab5-9e891eb54d2b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""82fe29d7-214e-4f64-9202-ceb662652b35"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5189ffb0-f788-45cd-8d63-3261a470427c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""183c6878-e65a-4ed2-9f78-33deb48f0f24"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6abc3094-e285-4ecf-b73f-888789ad047b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""66b8ebd0-8e69-4597-b6a7-71082cab1d94"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d73d84c8-6c52-4f5c-8ab5-0c3ca8b11a1c"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CrosshairPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1a063b8-dfa8-4e2b-8de3-e542492eefdc"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a123b613-1b11-452e-8f45-55430abbfe4b"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ScrollWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Character
            m_Character = asset.FindActionMap("Character", throwIfNotFound: true);
            m_Character_Movement = m_Character.FindAction("Movement", throwIfNotFound: true);
            m_Character_CrosshairPosition = m_Character.FindAction("CrosshairPosition", throwIfNotFound: true);
            m_Character_Shoot = m_Character.FindAction("Shoot", throwIfNotFound: true);
            m_Character_ScrollWeapon = m_Character.FindAction("ScrollWeapon", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Character
        private readonly InputActionMap m_Character;
        private ICharacterActions m_CharacterActionsCallbackInterface;
        private readonly InputAction m_Character_Movement;
        private readonly InputAction m_Character_CrosshairPosition;
        private readonly InputAction m_Character_Shoot;
        private readonly InputAction m_Character_ScrollWeapon;
        public struct CharacterActions
        {
            private @PlayerControls m_Wrapper;
            public CharacterActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Character_Movement;
            public InputAction @CrosshairPosition => m_Wrapper.m_Character_CrosshairPosition;
            public InputAction @Shoot => m_Wrapper.m_Character_Shoot;
            public InputAction @ScrollWeapon => m_Wrapper.m_Character_ScrollWeapon;
            public InputActionMap Get() { return m_Wrapper.m_Character; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CharacterActions set) { return set.Get(); }
            public void SetCallbacks(ICharacterActions instance)
            {
                if (m_Wrapper.m_CharacterActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMovement;
                    @CrosshairPosition.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnCrosshairPosition;
                    @CrosshairPosition.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnCrosshairPosition;
                    @CrosshairPosition.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnCrosshairPosition;
                    @Shoot.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnShoot;
                    @Shoot.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnShoot;
                    @Shoot.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnShoot;
                    @ScrollWeapon.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnScrollWeapon;
                    @ScrollWeapon.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnScrollWeapon;
                    @ScrollWeapon.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnScrollWeapon;
                }
                m_Wrapper.m_CharacterActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @CrosshairPosition.started += instance.OnCrosshairPosition;
                    @CrosshairPosition.performed += instance.OnCrosshairPosition;
                    @CrosshairPosition.canceled += instance.OnCrosshairPosition;
                    @Shoot.started += instance.OnShoot;
                    @Shoot.performed += instance.OnShoot;
                    @Shoot.canceled += instance.OnShoot;
                    @ScrollWeapon.started += instance.OnScrollWeapon;
                    @ScrollWeapon.performed += instance.OnScrollWeapon;
                    @ScrollWeapon.canceled += instance.OnScrollWeapon;
                }
            }
        }
        public CharacterActions @Character => new CharacterActions(this);
        private int m_KeyboardSchemeIndex = -1;
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        private int m_JoystickSchemeIndex = -1;
        public InputControlScheme JoystickScheme
        {
            get
            {
                if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
                return asset.controlSchemes[m_JoystickSchemeIndex];
            }
        }
        public interface ICharacterActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnCrosshairPosition(InputAction.CallbackContext context);
            void OnShoot(InputAction.CallbackContext context);
            void OnScrollWeapon(InputAction.CallbackContext context);
        }
    }
}
